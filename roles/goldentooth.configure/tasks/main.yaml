---
- name: 'Set default for disable_swap.'
  ansible.builtin.set_fact:
    disable_swap: false

- name: Set timezone to Asia/Tokyo
  community.general.timezone:
    name: "{{ pi_timezone }}"

- name: 'Set the keyboard.'
  ansible.builtin.lineinfile:
    path: '/etc/default/keyboard'
    regexp: '^XKBLAYOUT='
    line: 'XKBLAYOUT="{{ pi_keyboard }}"'
    state: 'present'
  become: true
  register: 'set_keyboard'

- name: 'Enable fan control.'
  ansible.builtin.lineinfile:
    path: '/boot/config.txt'
    regexp: '^#?dtoverlay=gpio-fan'
    line: "dtoverlay=gpio-fan,gpiopin={{ pi_fan_gpio }},temp={{ pi_fan_temp }}"
    state: 'present'
  become: true
  register: 'enable_fan'

- name: 'Enable overclocking.'
  ansible.builtin.lineinfile:
    path: '/boot/config.txt'
    regexp: "^#?{{ line.prefix }}"
    line: "{{ line.line }}"
    state: 'present'
  become: true
  loop:
    - prefix: 'arm_boost'
      line: 'arm_boost=1'
    - prefix: 'arm_freq'
      line: 'arm_freq={{ pi_overclock_freq }}'
    - prefix: 'over_voltage'
      line: 'over_voltage={{ pi_overclock_voltage }}'
  loop_control:
    loop_var: 'line'
  register: 'enable_overclock'

- name: 'Ensure important expressions are present in cmdline.txt.'
  ansible.builtin.lineinfile:
    path: '/boot/firmware/cmdline.txt'
    regexp: '^(?!.*{{ expression }})(.*)$'
    line: '\1 {{ expression }}'
    state: 'present'
    backrefs: true
  become: true
  loop:
    - 'cgroup_enable=cpuset'
    - 'cgroup_enable=memory'
    - 'cgroup_enable=hugetlb'
    - 'cgroup_memory=1'
  loop_control:
    loop_var: 'expression'
  register: 'ensure_cmdline'

- name: 'Disable swap.'
  when: 'ansible_swaptotal_mb > 0'
  block:
    - name: 'Disable the swapfile.'
      ansible.builtin.command: 'dphys-swapfile swapoff'
      become: true
      changed_when: false

    - name: 'Uninstall the swapfile.'
      ansible.builtin.command: 'dphys-swapfile uninstall'
      become: true
      changed_when: false

    - name: 'Disable the swapfile service.'
      ansible.builtin.systemd:
        name: 'dphys-swapfile'
        state: 'stopped'
        enabled: false
      become: true

    - name: 'Indicate that swap was disabled.'
      ansible.builtin.set_fact:
        disable_swap: true

- name: 'Select editor.'
  ansible.builtin.lineinfile:
    path: '~/.selected_editor'
    regexp: '^SELECTED_EDITOR'
    line: 'SELECTED_EDITOR="/bin/nano"'
    create: true
    state: 'present'

- name: 'Load kernel modules.'
  ansible.builtin.lineinfile:
    path: '/etc/modprobe.d/kubernetes.conf'
    regexp: "^#?{{ module }}$"
    line: "{{ module }}"
    create: true
    state: 'present'
  become: true
  loop:
    - 'overlay'
    - 'br_netfilter'
  loop_control:
    loop_var: 'module'

- name: 'Ensure kernel modules are enabled.'
  community.general.modprobe:
    name: "{{ module }}"
    state: 'present'
  become: true
  loop:
    - 'overlay'
    - 'br_netfilter'
  loop_control:
    loop_var: 'module'

- name: 'Let iptables see bridged traffic.'
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
    state: 'present'
  loop:
    - 'net.bridge.bridge-nf-call-iptables'
    - 'net.bridge.bridge-nf-call-ip6tables'
    - 'net.ipv4.ip_forward'
  become: true

- name: 'Install some packages.'
  ansible.builtin.apt:
    name:
      - 'sshpass'
    state: 'present'
    cache_valid_time: 3600
  become: true

- name: 'Indicate reboot required.'
  ansible.builtin.set_fact:
    reboot_required: true
  when: 'set_keyboard.changed or enable_fan.changed or enable_overclock.changed or ensure_cmdline.changed or disable_swap | default(false)'

- name: 'Reboot.'
  ansible.builtin.reboot:
  become: true
  when: 'reboot_required | default(false)'
