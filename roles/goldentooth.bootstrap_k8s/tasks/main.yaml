---
- name: 'Configure kubelet garbage collection'
  block:
    - name: 'Ensure kubelet service override directory exists'
      ansible.builtin.file:
        path: '/etc/systemd/system/kubelet.service.d'
        state: 'directory'
        owner: 'root'
        group: 'root'
        mode: '0755'

    - name: 'Template kubelet override configuration'
      ansible.builtin.template:
        src: 'kubelet-override.conf.j2'
        dest: '/etc/systemd/system/kubelet.service.d/override.conf'
        owner: 'root'
        group: 'root'
        mode: '0644'
        backup: true
      notify: 'restart kubelet'

    - name: 'Reload systemd daemon'
      ansible.builtin.systemd_service:
        daemon_reload: true

- name: 'Initialize the first control plane node.'
  when: 'inventory_hostname == kubernetes.first'
  block:

    - name: 'Initialize the first control plane node with kubeadm.'
      ansible.builtin.command:
        cmd: |-
          kubeadm init
            --control-plane-endpoint="{{ haproxy.ipv4_address }}:6443"
            --kubernetes-version="stable-{{ kubernetes.version_clean }}"
            --service-cidr="{{ network.service.cidr }}"
            --pod-network-cidr="{{ network.pod.cidr }}"
            --cert-dir="{{ kubernetes.pki_path }}"
            --cri-socket="{{ kubernetes.cri_socket_path }}"
            --upload-certs
      args:
        creates: "{{ kubernetes.admin_conf_path }}"
      environment:
        KUBECONFIG: "{{ kubernetes.admin_conf_path }}"
      register: 'kubeadm_init'

    - name: 'Restart kubelet.'
      ansible.builtin.systemd_service:
        name: 'kubelet'
        state: 'restarted'
        enabled: true
        daemon_reload: true

    - name: 'Ensure .kube directory exists.'
      ansible.builtin.file:
        path: '~/.kube'
        state: 'directory'
        mode: '0755'

    - name: 'Symlink the kubectl admin.conf to ~/.kube/config.'
      ansible.builtin.file:
        src: '/etc/kubernetes/admin.conf'
        dest: '~/.kube/config'
        state: 'link'
        mode: '0600'

    - name: 'Configure Calico networking.'
      ansible.builtin.command:
        cmd: "kubectl apply -f {{ kubernetes.calico_manifest_url }}"
      register: 'calico_result'
      until: 'calico_result is not failed'
      retries: 12
      delay: 5
      changed_when: false

- name: 'Set the kubeadm certificate key.'
  ansible.builtin.set_fact:
    k8s_certificate_key: "{{ line | regex_search('--certificate-key ([^ ]+)', '\\1') | first }}"
  loop: "{{ hostvars[kubernetes.first]['kubeadm_init'].stdout_lines | default([]) }}"
  loop_control:
    loop_var: 'line'
  when: '(line | trim) is match(".*--certificate-key.*")'

- name: 'Create kubeadm token for joining nodes.'
  ansible.builtin.command:
    cmd: "kubeadm --kubeconfig {{ kubernetes.admin_conf_path }} token create"
  changed_when: false
  register: 'temp_token'
  delegate_to: "{{ kubernetes.first }}"

- name: 'Set kubeadm token fact.'
  ansible.builtin.set_fact:
    kubeadm_token: "{{ temp_token.stdout }}"

- name: 'Set up the rest of the control plane nodes.'
  when: 'inventory_hostname in kubernetes.rest'
  block:

    - name: 'Ensure presence of Kubernetes directory.'
      ansible.builtin.file:
        path: '/etc/kubernetes'
        state: 'directory'
        mode: '0755'

    - name: 'Create kubeadm control plane config.'
      ansible.builtin.template:
        src: 'kubeadm-controlplane.yaml.j2'
        dest: '/etc/kubernetes/kubeadm-controlplane.yaml'
        mode: '0640'
        backup: true

    - name: 'Wait for the kube-apiserver to be ready.'
      ansible.builtin.wait_for:
        host: "{{ haproxy.ipv4_address }}"
        port: '6443'
        timeout: 180

    - name: 'Reset certificate directory.'
      ansible.builtin.shell:
        cmd: |
          if [ -f /etc/kubernetes/manifests/kube-apiserver.yaml ]; then
            kubeadm reset -f --cert-dir {{ kubernetes.pki_path }};
          fi
      changed_when: false

    - name: 'Join the control plane node to the cluster.'
      ansible.builtin.command:
        cmd: |
          kubeadm join --config /etc/kubernetes/kubeadm-controlplane.yaml
      register: 'kubeadm_join'
      changed_when: false

    - name: 'Ensure .kube directory exists.'
      ansible.builtin.file:
        path: '~/.kube'
        state: 'directory'
        mode: '0755'

    - name: 'Symlink the kubectl admin.conf to ~/.kube/conf.'
      ansible.builtin.file:
        src: '/etc/kubernetes/admin.conf'
        dest: '~/.kube/config'
        state: 'link'
        mode: '0600'

- name: 'Get a kubeadm join command for worker nodes.'
  ansible.builtin.command:
    cmd: 'kubeadm token create --print-join-command'
  changed_when: false
  when: 'ansible_hostname == kubernetes.first'
  register: 'kubeadm_join_command'

- name: 'Set the kubeadm join command fact.'
  ansible.builtin.set_fact:
    kubeadm_join_command: |
      {{ hostvars[kubernetes.first]['kubeadm_join_command'].stdout }} --ignore-preflight-errors=all

- name: 'Join node to Kubernetes control plane.'
  ansible.builtin.command:
    cmd: "{{ kubeadm_join_command }}"
  when: "clean_hostname in groups['k8s_worker']"
  changed_when: false
