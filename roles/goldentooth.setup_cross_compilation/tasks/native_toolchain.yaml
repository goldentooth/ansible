---
- name: "Verify ARM64 toolchain installation"
  ansible.builtin.shell: |
    {{ cross_compile.toolchain.gcc_path }} --version
    {{ cross_compile.toolchain.gxx_path }} --version
  register: toolchain_verify
  changed_when: false

- name: "Create toolchain wrapper scripts"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ cross_compile.bin_dir }}/{{ item.dest }}"
    mode: '0755'
  loop:
    - { src: "arm64-gcc.j2", dest: "arm64-gcc" }
    - { src: "arm64-g++.j2", dest: "arm64-g++" }
    - { src: "arm64-ld.j2", dest: "arm64-ld" }

- name: "Configure pkg-config for cross-compilation"
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      export PKG_CONFIG_PATH="{{ cross_compile.toolchain.sysroot }}/usr/lib/pkgconfig:{{ cross_compile.toolchain.sysroot }}/usr/share/pkgconfig"
      export PKG_CONFIG_LIBDIR="{{ cross_compile.toolchain.sysroot }}/usr/lib/pkgconfig:{{ cross_compile.toolchain.sysroot }}/usr/share/pkgconfig"
      export PKG_CONFIG_SYSROOT_DIR="{{ cross_compile.toolchain.sysroot }}"
      exec pkg-config "$@"
    dest: "{{ cross_compile.bin_dir }}/arm64-pkg-config"
    mode: '0755'

- name: "Create CMake toolchain file for ARM64"
  ansible.builtin.copy:
    content: |
      set(CMAKE_SYSTEM_NAME Linux)
      set(CMAKE_SYSTEM_PROCESSOR aarch64)
      
      set(CMAKE_SYSROOT {{ cross_compile.toolchain.sysroot }})
      
      set(CMAKE_C_COMPILER {{ cross_compile.toolchain.gcc_path }})
      set(CMAKE_CXX_COMPILER {{ cross_compile.toolchain.gxx_path }})
      
      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
      
      set(CMAKE_C_FLAGS "-march=armv8-a")
      set(CMAKE_CXX_FLAGS "-march=armv8-a")
    dest: "{{ cross_compile.base_dir }}/arm64-toolchain.cmake"
    mode: '0644'

- name: "Install ARM64 development libraries"
  ansible.builtin.shell: |
    dpkg --add-architecture arm64
    apt-get update
    apt-get install -y \
      libc6-dev:arm64 \
      libssl-dev:arm64 \
      zlib1g-dev:arm64 \
      {{ cross_compile.memory_allocators.gperftools.cross_package }} \
      {{ cross_compile.memory_allocators.jemalloc.cross_package }}
  become: yes
  register: arm64_libs
  changed_when: arm64_libs.rc == 0

- name: "Create cross-compilation test program"
  ansible.builtin.copy:
    content: |
      #include <stdio.h>
      #include <unistd.h>
      
      int main() {
          printf("Architecture: %s\n", 
      #ifdef __aarch64__
                 "ARM64/AArch64"
      #elif defined(__x86_64__)
                 "x86_64"
      #else
                 "Unknown"
      #endif
          );
          return 0;
      }
    dest: "{{ cross_compile.base_dir }}/test_cross_compile.c"
    mode: '0644'

- name: "Test ARM64 cross-compilation"
  ansible.builtin.shell: |
    cd {{ cross_compile.base_dir }}
    {{ cross_compile.toolchain.gcc_path }} -o test_arm64 test_cross_compile.c
    file test_arm64
  register: cross_compile_test
  changed_when: false

- name: "Verify cross-compiled binary architecture"
  ansible.builtin.shell: |
    file {{ cross_compile.base_dir }}/test_arm64 | grep -q "ARM aarch64"
  register: arch_verify
  changed_when: false

- name: "Display toolchain test results"
  ansible.builtin.debug:
    msg:
      - "Toolchain verification: {{ 'Success' if toolchain_verify.rc == 0 else 'Failed' }}"
      - "Cross-compilation test: {{ 'Success' if cross_compile_test.rc == 0 else 'Failed' }}"
      - "ARM64 binary verification: {{ 'Success' if arch_verify.rc == 0 else 'Failed' }}"
      - "Binary info: {{ cross_compile_test.stdout }}"