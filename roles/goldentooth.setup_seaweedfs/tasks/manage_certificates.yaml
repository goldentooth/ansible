---
# Intelligent certificate management for SeaweedFS - generates certificates only when needed

- name: 'Check if SeaweedFS certificate needs renewal.'
  ansible.builtin.shell:
    cmd: |
      if [ ! -f "{{ seaweedfs.certs_path }}/seaweedfs.crt" ]; then
        echo "MISSING"
      else
        {{ step_ca.executable }} certificate needs-renewal "{{ seaweedfs.certs_path }}/seaweedfs.crt" && echo "NEEDS_RENEWAL" || echo "VALID"
      fi
  register: 'seaweedfs_cert_status'
  changed_when: false
  failed_when: false

- name: 'Debug certificate renewal status.'
  ansible.builtin.debug:
    msg: |
      Certificate status: {{ seaweedfs_cert_status.stdout }}
      Certificate renewal needed: {{ seaweedfs_cert_status.stdout in ['MISSING', 'NEEDS_RENEWAL'] }}

- name: 'Generate new certificate if missing or needs renewal.'
  block:

    - name: 'Ensure directory for SeaweedFS certs exists.'
      ansible.builtin.file:
        path: "{{ seaweedfs.certs_path }}"
        state: 'directory'
        owner: "{{ seaweedfs.uid }}"
        group: "{{ seaweedfs.gid }}"
        mode: '0755'

    - name: 'Generate SeaweedFS certificate using step-ca.'
      ansible.builtin.shell:
        cmd: |
          {{ step_ca.executable }} \
            ca certificate \
            "{{ clean_hostname }}.seaweedfs.storage.{{ cluster_domain | default('goldentooth.net') }}" \
            "{{ seaweedfs.certs_path }}/seaweedfs.crt" \
            "{{ seaweedfs.certs_path }}/seaweedfs.key" \
            --provisioner="{{ step_ca.default_provisioner.name }}" \
            --password-file="{{ step_ca.default_provisioner.password_path }}" \
            --san="{{ clean_hostname }}" \
            --san="{{ clean_hostname }}.seaweedfs.storage.{{ cluster_domain | default('goldentooth.net') }}" \
            --san="seaweedfs.storage.{{ cluster_domain | default('goldentooth.net') }}" \
            --san="{{ ipv4_address }}" \
            --san="localhost" \
            --san="127.0.0.1" \
            --not-after="24h" \
            --console \
            --force
      notify:
        - 'Restart SeaweedFS services.'

    - name: 'Repair permissions on SeaweedFS certs directory.'
      ansible.builtin.file:
        path: "{{ item }}"
        state: 'file'
        owner: "{{ seaweedfs.uid }}"
        group: "{{ seaweedfs.gid }}"
        mode: '0600'
      loop:
        - "{{ seaweedfs.certs_path }}/seaweedfs.key"
        - "{{ seaweedfs.certs_path }}/seaweedfs.crt"
      loop_control:
        loop_var: 'item'

    - name: 'Display certificate generation result.'
      ansible.builtin.debug:
        msg: "Certificate generated successfully for SeaweedFS"

  when: "seaweedfs_cert_status.stdout in ['MISSING', 'NEEDS_RENEWAL']"