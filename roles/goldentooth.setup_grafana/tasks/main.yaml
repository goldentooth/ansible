---
- name: 'Ensure that `git` is installed.'
  ansible.builtin.apt:
    pkg:
      - 'git'
    state: 'present'

- name: 'Grab mounts manually.'
  ansible.builtin.shell:
    cmd: 'cat /proc/mounts'
  register: 'proc_mounts'
  changed_when: 'false'

- name: 'Set a fact to indicate if the Grafana data directory is mounted.'
  ansible.builtin.set_fact:
    grafana_data_mounted: "{{ proc_mounts.stdout_lines | select('search', '/var/lib/grafana') | list | length > 0 }}"

- name: 'Install Grafana.'
  ansible.builtin.apt:
    pkg:
      - 'grafana'
    state: 'present'
  notify:
    - 'Restart Grafana service.'

- name: 'Ensure Grafana service directory exists.'
  ansible.builtin.file:
    path: '/etc/systemd/system/cert-renewer@grafana.service.d'
    state: directory
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: 'Enable cert-renewer service for Grafana.'
  ansible.builtin.systemd_service:
    name: 'cert-renewer@grafana.timer'
    enabled: true
    state: 'started'
  notify:
    - 'Trigger systemd daemon-reload.'

- name: 'Copy Grafana certificate renewer configuration into place on all nodes.'
  ansible.builtin.template:
    src: 'cert-renewer@grafana.conf.j2'
    dest: '/etc/systemd/system/cert-renewer@grafana.service.d/override.conf'
  notify:
    - 'Trigger systemd daemon-reload.'

- name: 'Ensure existence of Grafana data directory.'
  ansible.builtin.file:
    path: '/var/lib/grafana'
    state: 'directory'
    owner: 'grafana'
    group: 'grafana'
    mode: '0755'
  notify:
    - 'Restart Grafana service.'

- name: 'Manage the mount for the Grafana data directory.'
  ansible.posix.mount:
    path: '/var/lib/grafana'
    src: 'tmpfs'
    fstype: 'tmpfs'
    opts: 'size=100M,mode=0755'
    state: 'present'
  when: 'not grafana_data_mounted'
  notify:
    - 'Restart Grafana service.'

- name: 'Configure Grafana.'
  ansible.builtin.template:
    src: 'grafana.ini.j2'
    dest: '/etc/grafana/grafana.ini'
    owner: 'grafana'
    group: 'grafana'
    mode: '0600'
  notify:
    - 'Restart Grafana service.'

- name: 'Check out the Grafana dashboards repository.'
  ansible.builtin.git:
    repo: "https://github.com/{{ cluster.github.organization }}/{{ grafana.provisioners.dashboards.repository_name }}.git"
    dest: '/var/lib/grafana/dashboards'
  become: 'yes'
  become_user: 'grafana'
  notify:
    - 'Restart Grafana service.'

- name: 'Update ownership of the dashboards directory.'
  ansible.builtin.file:
    path: '/var/lib/grafana/dashboards'
    state: 'directory'
    owner: 'grafana'
    group: 'grafana'
    mode: '0755'

- name: 'Install Grafana script to update dashboards.'
  ansible.builtin.template:
    src: 'script.update_dashboards.sh.j2'
    dest: '/usr/local/bin/grafana-update-dashboards.sh'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: 'Install Cron Job to update Grafana dashboards.'
  ansible.builtin.template:
    src: 'cron.update_dashboards.j2'
    dest: '/etc/cron.d/grafana_update_dashboards'
    owner: 'grafana'
    group: 'grafana'
    mode: '0644'

- name: 'Add dashboard provisioning configuration.'
  ansible.builtin.template:
    src: 'provisioners.dashboards.yaml.j2'
    dest: '/etc/grafana/provisioning/dashboards/all.yml'
    owner: 'grafana'
    group: 'grafana'
    mode: '0644'
  notify:
    - 'Restart Grafana service.'

- name: 'Add datasource provisioning configuration.'
  ansible.builtin.template:
    src: 'provisioners.datasources.yaml.j2'
    dest: '/etc/grafana/provisioning/datasources/all.yml'
    owner: 'grafana'
    group: 'grafana'
    mode: '0644'
  notify:
    - 'Restart Grafana service.'

- name: 'Reset Grafana admin password.'
  ansible.builtin.command:
    cmd: |
      grafana-cli admin reset-admin-password \"{{ grafana.admin_password }}\"
  when: 'grafana.admin_password is defined and grafana.admin_password | length > 0'
  changed_when: false
  notify:
    - 'Restart Grafana service.'

- name: 'Ensure Grafana database file has correct ownership.'
  ansible.builtin.file:
    path: '/var/lib/grafana/grafana.db'
    owner: 'grafana'
    group: 'grafana'
    mode: '0640'
  ignore_errors: true  # File may not exist on fresh installations

- name: 'Configure Nginx reverse proxy for Grafana on the load balancer.'
  ansible.builtin.template:
    src: 'nginx-grafana.conf.j2'
    dest: '/etc/nginx/sites-enabled/grafana.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  delegate_to: "{{ groups['haproxy'] | first }}"
  notify:
    - 'Restart Nginx service.'
