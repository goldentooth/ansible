---
- name: 'Install MUNGE.'
  ansible.builtin.apt:
    name:
      - 'munge'
    state: 'present'
  notify:
    - 'Retrieve first MUNGE key.'
    - 'Synchronize MUNGE key.'
    - 'Restart MUNGE.'

- name: 'Install slurmd.'
  ansible.builtin.apt:
    name:
      - 'slurm-wlm'
    state: 'present'
  notify:
    - 'Restart slurmd.'
    - 'Disable slurmctld.'
    - 'Restart slurmctld.'

- name: 'Create Slurm shared directories.'
  ansible.builtin.file:
    path: "{{ slurm_directory }}"
    state: 'directory'
    mode: '0755'
    owner: 'slurm'
    group: 'slurm'
  loop: "{{ slurm_shared_directories }}"
  loop_control:
    loop_var: 'slurm_directory'
  run_once: true

- name: 'Create Slurm local directories.'
  ansible.builtin.file:
    path: "{{ slurm_directory }}"
    state: 'directory'
    mode: '0755'
    owner: 'slurm'
    group: 'slurm'
  loop: "{{ slurm_local_directories }}"
  loop_control:
    loop_var: 'slurm_directory'

- name: 'Deploy config files.'
  ansible.builtin.template:
    src: "{{ config_file }}.conf.j2"
    dest: '/etc/slurm/{{ config_file }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - 'slurm'
    - 'cgroup'
    - 'cgroup_allowed_devices_file'
  loop_control:
    loop_var: 'config_file'
  notify:
    - 'Restart slurmd.'
    - 'Disable slurmctld.'
    - 'Restart slurmctld.'

- name: 'Install Lua packages.'
  ansible.builtin.apt:
    name:
      - 'lua5.1'
      - 'lua-posix'
      - 'liblua5.1-0-dev'
      - 'lua-term'
    state: 'present'

- name: 'Symlink lua and luac.'
  ansible.builtin.file:
    src: "{{ file }}"
    dest: "{{ slurm.nfs_base_path }}/bin/{{ file | basename }}"
    owner: 'slurm'
    group: 'slurm'
    state: 'link'
  loop:
    - '/usr/bin/lua'
    - '/usr/bin/luac'
  loop_control:
    loop_var: 'file'
  run_once: true

- name: Check if Lmod is installed.
  ansible.builtin.stat:
    path: "{{ slurm.nfs_base_path }}/lmod/lmod/init/cshrc"
  register: lmod_cshrc

- name: 'Install Lmod.'
  block:

    - name: 'Install tclsh for Lmod.'
      ansible.builtin.apt:
        name:
          - 'tclsh'
        state: 'present'

    - name: 'Set Lmod source filename.'
      ansible.builtin.set_fact:
        lmod_source_filename: "{{ slurm.lmod.source_url | ansible.builtin.basename }}"

    - name: 'Create temporary build directory.'
      ansible.builtin.tempfile:
        state: 'directory'
      register: 'lmod_source_dir'

    - name: 'Download and unarchive Lmod source.'
      ansible.builtin.unarchive:
        src: "{{ slurm.lmod.source_url }}"
        dest: "{{ lmod_source_dir.path }}"
        remote_src: true
      register: 'lmod_unarchive'

    - name: 'Build and install Lmod.'
      ansible.builtin.shell:
        cmd: |
          ./configure \
            --prefix="{{ slurm.nfs_base_path }}" \
            --with-fastTCLInterp=no
          make install
        chdir: "{{ lmod_unarchive.dest }}/Lmod-8.4"

    - name: 'Create StdEnv.lua.'
      ansible.builtin.copy:
        content: ' '
        dest: "{{ slurm.nfs_base_path }}/apps/modulefiles/StdEnv.lua"
        owner: 'slurm'
        group: 'slurm'
        mode: 0755

    - name: 'Add modulefiles path to relevant files.'
      ansible.builtin.lineinfile:
        path: "{{ path }}"
        regexp: '^export MODULEPATH'
        line: 'export MODULEPATH="{{ slurm.nfs_base_path }}/apps/modulefiles";'
      loop:
        - "{{ slurm.nfs_base_path }}/lmod/lmod/init/profile"
        - "{{ slurm.nfs_base_path }}/lmod/lmod/init/cshrc"
      loop_control:
        loop_var: 'path'

  run_once: true
  when: "not lmod_cshrc.stat.exists"

- name: 'Symlink profile and cshrc.'
  ansible.builtin.file:
    src: "{{ slurm.nfs_base_path }}/{{ file.src }}"
    dest: "/etc/profile.d/{{ file.dest }}"
    owner: 'slurm'
    group: 'slurm'
    state: 'link'
  loop:
    - src: 'lmod/lmod/init/profile'
      dest: 'z00_lmod.sh'
    - src: 'lmod/lmod/init/cshrc'
      dest: 'z00_lmod.csh'
  loop_control:
    loop_var: 'file'

- name: 'Install OpenMPI.'
  ansible.builtin.apt:
    name:
      - 'libopenmpi3'
      - 'libopenmpi-dev'
      - 'openmpi-bin'
      - 'openmpi-common'
    state: 'present'

- name: 'Create OpenMPI.lua.'
  ansible.builtin.copy:
    content: |
      help([[
      Description
      ===========
      Open MPI Library

      More information
      ================
      - Homepage: http://www.open-mpi.org/
      ]])
      prepend_path("PATH", "/usr/bin")
      prepend_path("CPATH", "/usr/lib/aarch64-linux-gnu/openmpi/include")
      prepend_path("LD_LIBRARY_PATH", "/usr/lib/aarch64-linux-gnu/openmpi/lib")
      prepend_path("LIBRARY_PATH", "/usr/lib/aarch64-linux-gnu/openmpi/lib")
      conflict("OpenMPI")
    dest: "{{ slurm.nfs_base_path }}/apps/modulefiles/OpenMPI.lua"
    owner: 'slurm'
    group: 'slurm'
    mode: 0755
  run_once: true

- name: 'Check if Golang is installed.'
  ansible.builtin.stat:
    path: "{{ slurm.nfs_base_path }}/go/{{ go_version }}/bin/go"
  register: go_bin_dir

- name: 'Install Golang.'
  block:

    - name: 'Create Golang version directory.'
      ansible.builtin.file:
        path: "{{ slurm.nfs_base_path }}/go/{{ go_version }}"
        state: 'directory'
        mode: '0755'
        owner: 'slurm'
        group: 'slurm'

    - name: 'Download and unarchive Golang archive.'
      ansible.builtin.unarchive:
        src: "https://dl.google.com/go/go{{ go_version }}.linux-arm64.tar.gz"
        dest: "{{ slurm.nfs_base_path }}/go/{{ go_version }}"
        remote_src: true
      register: 'go_unarchive'

    - name: 'Create Golang.lua directory.'
      ansible.builtin.file:
        path: "{{ slurm.nfs_base_path }}/apps/modulefiles/Golang"
        state: 'directory'
        mode: '0755'
        owner: 'slurm'
        group: 'slurm'

    - name: 'Create Golang.lua.'
      ansible.builtin.copy:
        content: |
          help([[
          Description
          ===========
          GO Programming Language

          More information
          ================
          - Homepage: https://go.dev
          ]])
          local base = "{{ go_unarchive.dest }}/go"
          prepend_path("PATH", pathJoin(base, "bin"))
          conflict("Golang")
        dest: "{{ slurm.nfs_base_path }}/apps/modulefiles/Golang/{{ go_version }}.lua"
        owner: 'slurm'
        group: 'slurm'
        mode: 0755

  run_once: true
  when: "not go_bin_dir.stat.exists"

- name: 'Check if Singularity is installed.'
  ansible.builtin.stat:
    path: "{{ slurm.nfs_base_path }}/singularity/{{ singularity_version }}"
  register: singularity_dir

- name: 'Build and install Singularity.'
  block:

    - name: 'Install SingularityCE dependencies.'
      ansible.builtin.apt:
        name:
          - 'autoconf'
          - 'automake'
          - 'conmon'
          - 'cryptsetup'
          - 'fuse2fs'
          - 'git'
          - 'fuse'
          - 'libfuse-dev'
          - 'libglib2.0-dev'
          - 'libseccomp-dev'
          - 'libsubid-dev'
          - 'libtool'
          - 'pkg-config'
          - 'squashfs-tools'
          - 'squashfs-tools-ng'
          - 'uidmap'
          - 'wget'
          - 'zlib1g-dev'
        state: 'present'

    - name: 'Create temporary build directory.'
      ansible.builtin.tempfile:
        state: 'directory'
      register: 'singularity_git_dir'

    - name: 'Check out Singularity Git repo.'
      ansible.builtin.git:
        repo: 'https://github.com/sylabs/singularity.git'
        dest: "{{ singularity_git_dir.path }}"
        version: "v{{ singularity_version }}"

    - name: 'Build Singularity.'
      ansible.builtin.shell:
        cmd: |
          source /etc/profile.d/z00_lmod.sh
          module load Golang/{{ go_version }}
          ./mconfig --prefix={{ slurm.nfs_base_path }}/singularity/{{ singularity_version }}
          make -C builddir
          make -C builddir install
        executable: '/bin/bash'
        chdir: "{{ singularity_git_dir.path }}"

    - name: 'Create Singularity.lua directory.'
      ansible.builtin.file:
        path: "{{ slurm.nfs_base_path }}/apps/modulefiles/Singularity"
        state: 'directory'
        mode: '0755'
        owner: 'slurm'
        group: 'slurm'

    - name: 'Create Singularity.lua.'
      ansible.builtin.copy:
        content: |
          help([[
          Description
          ===========
          Singularity Container

          More information
          ================
          - Homepage: https://sylabs.io/singularity
          ]])
          load("Golang")
          local base = "{{ slurm.nfs_base_path }}/singularity/{{ singularity_version }}"
          prepend_path("PATH", pathJoin(base, "bin"))
          conflict("Singularity")
        dest: "{{ slurm.nfs_base_path }}/apps/modulefiles/Singularity/{{ singularity_version }}.lua"
        owner: 'slurm'
        group: 'slurm'
        mode: 0755

  run_once: true
  when: "not singularity_dir.stat.exists"

- name: 'Check if Miniforge is installed.'
  ansible.builtin.stat:
    path: "{{ slurm.nfs_base_path }}/miniforge"
  register: 'miniforge_dir'

- name: 'Build and install Miniforge.'
  block:

    - name: 'Create temporary directory.'
      ansible.builtin.tempfile:
        state: 'directory'
      register: 'miniforge_script_dir'

    - name: 'Download installation script.'
      ansible.builtin.get_url:
        url: 'https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh'
        dest: "{{ miniforge_script_dir.path }}/miniforge.sh"
        mode: '0755'

    - name: 'Execute installation script.'
      ansible.builtin.command:
        cmd: "bash miniforge.sh -b -u -p {{ slurm.nfs_base_path }}/miniforge"
        chdir: "{{ miniforge_script_dir.path }}"

    - name: 'Create Conda.lua.'
      ansible.builtin.copy:
        content: |
          help([[
            Description
            ===========
            Mini Forge Conda

            More information
            ================
            - Homepage: https://github.com/conda-forge/miniforge
          ]])
          local base = "{{ slurm.nfs_base_path }}/miniforge"
          prepend_path("PATH", pathJoin(base, "bin"))
          conflict("Conda")
        dest: "{{ slurm.nfs_base_path }}/apps/modulefiles/Conda.lua"
        owner: 'slurm'
        group: 'slurm'
        mode: 0755

    - name: 'Create default environment.'
      ansible.builtin.shell:
        cmd: |
          source /etc/profile.d/z00_lmod.sh
          module load Conda
          conda update -n base conda
          conda create -n default-env python -y
        chdir: "{{ miniforge_script_dir.path }}"
        creates: "{{ slurm.nfs_base_path }}/miniforge/envs/default-env"
        executable: '/bin/bash'

    - name: 'Add settings to .condarc.'
      ansible.builtin.lineinfile:
        path: "{{ slurm.nfs_base_path }}/miniforge/.condarc"
        block: |
          env_prompt: ({name})
          envs_dirs:
            - {{ slurm.nfs_base_path }}/miniforge/user_envs
          pkgs_dirs:
            - {{ slurm.nfs_base_path }}/miniforge/user_pkgs

    - name: 'Create user_envs and user_pkgs directories.'
      ansible.builtin.file:
        path: "{{ slurm.nfs_base_path }}/miniforge/{{ dir_name }}"
        state: 'directory'
        mode: '0775'
        owner: 'users'
        group: 'users'
      loop:
        - 'user_envs'
        - 'user_pkgs'
      loop_control:
        loop_var: 'dir_name'

  run_once: true
  when: "not miniforge_dir.stat.exists"

- name: 'Create user Conda environments.'
  ansible.builtin.shell:
    cmd: |
      source /etc/profile.d/z00_lmod.sh
      module load Conda
      conda update -n base conda
      conda create -n python{{ python_version }} python={{ python_version }} -y
    creates: "{{ slurm.nfs_base_path }}/miniforge/user_envs/python{{ python_version }}"
    executable: '/bin/bash'
  become: true
  become_user: "{{ my.name.lower }}"
  run_once: true
  loop: "{{ python_versions }}"
  loop_control:
    loop_var: 'python_version'
