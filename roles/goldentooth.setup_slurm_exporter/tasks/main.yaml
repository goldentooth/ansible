---
# Setup prometheus-slurm-exporter for Slurm monitoring

- name: 'Create slurm-exporter system user'
  ansible.builtin.user:
    name: 'slurm-exporter'
    system: true
    shell: '/usr/sbin/nologin'
    home: '/var/lib/slurm-exporter'
    create_home: true
    state: 'present'

- name: 'Create slurm-exporter directories'
  ansible.builtin.file:
    path: "{{ item }}"
    state: 'directory'
    owner: 'slurm-exporter'
    group: 'slurm-exporter'
    mode: '0755'
  loop:
    - '/etc/slurm-exporter'
    - '/var/lib/slurm-exporter'
    - '/var/log/slurm-exporter'

- name: 'Download prometheus-slurm-exporter from rivosinc fork'
  ansible.builtin.get_url:
    url: 'https://github.com/rivosinc/prometheus-slurm-exporter/releases/download/v{{ prometheus_slurm_exporter.version }}/prometheus-slurm-exporter_linux_{{ host.architecture }}.tar.gz'
    dest: '/tmp/prometheus-slurm-exporter-{{ prometheus_slurm_exporter.version }}.tar.gz'
    mode: '0644'
  register: 'download_result'

- name: 'Extract prometheus-slurm-exporter binary'
  ansible.builtin.unarchive:
    src: '/tmp/prometheus-slurm-exporter-{{ prometheus_slurm_exporter.version }}.tar.gz'
    dest: '/tmp'
    remote_src: true
  when: download_result.changed

- name: 'Install prometheus-slurm-exporter binary'
  ansible.builtin.copy:
    src: '/tmp/prometheus-slurm-exporter'
    dest: '/usr/local/bin/prometheus-slurm-exporter'
    owner: 'root'
    group: 'root'
    mode: '0755'
    remote_src: true
  notify: 'Restart slurm-exporter'

- name: 'Create Step-CA certificate configuration for slurm-exporter'
  ansible.builtin.template:
    src: 'cert-renewer@slurm-exporter.conf.j2'
    dest: '/etc/systemd/system/cert-renewer@slurm-exporter.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: 'Reload systemd'

- name: 'Request initial TLS certificate for slurm-exporter'
  ansible.builtin.command: |
    step ca certificate "slurm-exporter.{{ host.fqdn }}" \
      /etc/ssl/certs/slurm-exporter.pem \
      /etc/ssl/private/slurm-exporter.key \
      --provisioner={{ step_ca.default_provisioner.name }} \
      --provisioner-password-file={{ step_ca.default_provisioner.password_path }} \
      --san=slurm-exporter.{{ host.fqdn }} \
      --san=slurm-exporter \
      --san={{ ansible_fqdn }} \
      --san={{ ipv4_address }} \
      --not-after=168h \
      --force
  args:
    creates: '/etc/ssl/certs/slurm-exporter.pem'
  notify: 'Restart slurm-exporter'

- name: 'Set certificate file permissions'
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: '/etc/ssl/certs/slurm-exporter.pem', owner: 'slurm-exporter', group: 'slurm-exporter', mode: '0644' }
    - { path: '/etc/ssl/private/slurm-exporter.key', owner: 'slurm-exporter', group: 'slurm-exporter', mode: '0600' }

- name: 'Create slurm-exporter systemd service'
  ansible.builtin.template:
    src: 'slurm-exporter.service.j2'
    dest: '/etc/systemd/system/slurm-exporter.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify:
    - 'Reload systemd'
    - 'Restart slurm-exporter'

- name: 'Enable and start certificate renewal timer'
  ansible.builtin.systemd:
    name: 'cert-renewer@slurm-exporter.timer'
    enabled: true
    state: 'started'
    daemon_reload: true

- name: 'Enable and start slurm-exporter service'
  ansible.builtin.systemd:
    name: 'slurm-exporter'
    enabled: true
    state: 'started'
    daemon_reload: true

- name: 'Generate Prometheus service discovery targets'
  ansible.builtin.template:
    src: 'slurm_targets.yaml.j2'
    dest: '/etc/prometheus/file_sd/slurm_targets.yaml'
    owner: 'prometheus'
    group: 'prometheus'
    mode: '0644'
  delegate_to: 'allyrion'
  run_once: true
  notify: 'Reload prometheus'

- name: 'Verify slurm-exporter is responding'
  ansible.builtin.uri:
    url: 'http://{{ ansible_default_ipv4.address }}:{{ prometheus_slurm_exporter.port }}/metrics'
    method: 'GET'
    timeout: 10
  register: 'exporter_check'
  retries: 3
  delay: 5
  until: exporter_check.status == 200
  failed_when: false

- name: 'Display exporter status'
  ansible.builtin.debug:
    msg: |
      Slurm exporter status on {{ inventory_hostname }}:
      {% if exporter_check.status == 200 %}
      ✓ Service is responding on port {{ prometheus_slurm_exporter.tls_port }}
      ✓ Metrics endpoint accessible
      {% else %}
      ✗ Service check failed (status: {{ exporter_check.status | default('no response') }})
      {% endif %}

- name: 'Clean up temporary files'
  ansible.builtin.file:
    path: "{{ item }}"
    state: 'absent'
  loop:
    - '/tmp/prometheus-slurm-exporter-{{ prometheus_slurm_exporter.version }}.tar.gz'
    - '/tmp/prometheus-slurm-exporter'