---
- name: Initialize test results
  set_fact:
    consul_tests: []
    consul_health: false
    consul_cert_days: 0

- name: Check Consul service status
  systemd:
    name: consul
  register: consul_service
  ignore_errors: yes

- name: Record Consul service test
  set_fact:
    consul_tests: "{{ consul_tests + [{'name': 'consul_service_running', 'category': 'consul', 'success': (consul_service.status.ActiveState == 'active') | bool, 'duration': 0.1}] }}"

- name: Check if consul command exists
  stat:
    path: /usr/bin/consul
  register: consul_command_stat

- name: Check Consul members
  command: consul members -status=alive -http-addr={{ ansible_default_ipv4.address }}:8500
  register: consul_members_raw
  changed_when: false
  ignore_errors: yes
  when: 
    - consul_service.status.ActiveState == "active"
    - consul_command_stat.stat.exists

- name: Count Consul members
  set_fact:
    consul_member_count: "{{ consul_members_raw.stdout_lines | length - 1 }}"
  when: consul_members_raw is succeeded

- name: Verify expected Consul nodes
  set_fact:
    consul_members_test:
      name: "consul_all_members_present"
      category: "consul"
      success: "{{ (consul_member_count | int) == (groups['consul'] | length) }}"
      duration: 0.2
  when: consul_member_count is defined

- name: Add member count test
  set_fact:
    consul_tests: "{{ consul_tests + [consul_members_test] }}"
  when: consul_members_test is defined

- name: Check Consul certificate exists
  stat:
    path: /etc/consul.d/certs/tls.crt
  register: consul_cert

- name: Record certificate presence test
  set_fact:
    consul_tests: "{{ consul_tests + [{'name': 'consul_certificate_present', 'category': 'consul', 'success': consul_cert.stat.exists | bool, 'duration': 0.1}] }}"

- name: Check if certificate needs renewal
  command: step certificate needs-renewal /etc/consul.d/certs/tls.crt
  register: cert_needs_renewal
  when: consul_cert.stat.exists
  changed_when: false
  failed_when: false
  become: true

- name: Record certificate validity test
  set_fact:
    consul_tests: "{{ consul_tests + [{'name': 'consul_certificate_valid', 'category': 'consul', 'success': (cert_needs_renewal.rc != 0) | bool, 'duration': 0.1}] }}"
    consul_cert_days: "{{ 1 if (cert_needs_renewal is defined and cert_needs_renewal.rc != 0) else 0 }}"

- name: Check Consul API health via CLI
  command: consul status -http-addr={{ ansible_default_ipv4.address }}:8500
  register: consul_api
  changed_when: false
  ignore_errors: yes
  when: 
    - consul_service.status.ActiveState == "active"
    - consul_command_stat.stat.exists

- name: Record API test
  set_fact:
    consul_tests: "{{ consul_tests + [{'name': 'consul_api_responding', 'category': 'consul', 'success': (consul_api.rc == 0) | bool, 'duration': 0.3}] }}"
  when: consul_api is defined

- name: Determine overall Consul health
  set_fact:
    consul_health: "{{ consul_tests | selectattr('success', 'equalto', false) | list | length == 0 }}"

# NEW TESTS: Enhanced Consul monitoring validation
- name: Check Consul operator area command
  command: consul operator area -list -http-addr={{ ansible_default_ipv4.address }}:8500
  register: consul_metrics
  changed_when: false
  ignore_errors: yes
  when: 
    - consul_service.status.ActiveState == "active"
    - consul_command_stat.stat.exists

- name: Record metrics endpoint test
  set_fact:
    consul_tests: "{{ consul_tests + [{'name': 'consul_metrics_endpoint', 'category': 'consul', 'success': (consul_metrics is succeeded) | bool, 'duration': 0.3}] }}"
  when: consul_metrics is defined

- name: Validate Consul telemetry via info command
  command: consul info -http-addr={{ ansible_default_ipv4.address }}:8500
  register: consul_info
  changed_when: false
  ignore_errors: yes
  when: 
    - consul_service.status.ActiveState == "active"
    - consul_command_stat.stat.exists

- name: Record telemetry data test
  set_fact:
    consul_tests: "{{ consul_tests + [{'name': 'consul_telemetry_data_present', 'category': 'consul', 'success': (consul_info.rc == 0 and 'runtime' in consul_info.stdout) | bool, 'duration': 0.2}] }}"
  when: consul_info is defined

- name: Check Consul role labeling (client vs server)
  set_fact:
    consul_role: "{{ 'server' if inventory_hostname in groups['consul_server'] else 'client' }}"
    consul_role_test:
      name: "consul_role_correctly_identified"
      category: "consul"
      success: true
      duration: 0.1

- name: Add role identification test
  set_fact:
    consul_tests: "{{ consul_tests + [consul_role_test] }}"

- name: Export test results
  set_fact:
    test_results: "{{ (test_results | default([])) + consul_tests }}"
    service_health: "{{ (service_health | default({})) | combine({'consul': consul_health}) }}"
    certificate_status: "{{ (certificate_status | default([])) + [{'service': 'consul', 'days_remaining': consul_cert_days | int}] }}"