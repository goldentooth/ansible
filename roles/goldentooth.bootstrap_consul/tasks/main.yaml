---
# This role bootstraps the Consul ACL system and generates the management token

- name: 'Remove any existing gossip key.'
  ansible.builtin.file:
    path: "{{ consul.opt_path }}/serf/local.keyring"
    state: 'absent'

- name: 'Generate the gossip encryption key.'
  ansible.builtin.command:
    cmd: 'consul keygen'
  no_log: true
  run_once: true
  register: 'gossip_key'

- name: 'Display the gossip encryption key for vault storage.'
  ansible.builtin.debug:
    msg: |
      =====================================
      CONSUL GOSSIP KEY GENERATED:
      {{ gossip_key.stdout }}
      
      Store this key in the Ansible vault with:
      goldentooth set_vault secret_vault.consul.gossip_key "{{ gossip_key.stdout }}"
      =====================================

- name: 'Remove ACL bootstrap reset file if it exists.'
  ansible.builtin.file:
    path: "{{ consul.acl_bootstrap_reset_path }}"
    state: 'absent'
  changed_when: false

- name: 'Bootstrap ACL on server nodes.'
  block:

    - name: 'Attempt to perform ACL bootstrap.'
      ansible.builtin.shell:
        cmd: 'consul acl bootstrap'
      register: 'bootstrap_result'

    - name: 'Extract SecretID from successful bootstrap.'
      ansible.builtin.set_fact:
        consul_mgmt_token: "{{ bootstrap_result.stdout | regex_search('SecretID:\\s+([a-f0-9\\-]+)', '\\1') | first }}"

  rescue:

    - name: 'Extract reset index.'
      ansible.builtin.set_fact:
        reset_index: "{{ bootstrap_result.stderr | regex_search('reset index: (\\d+)', '\\1') | first }}"
      when: "'reset index' in bootstrap_result.stderr"

    - name: 'Write the ACL bootstrap reset index to acl-bootstrap-reset.'
      ansible.builtin.copy:
        content: "{{ reset_index }}"
        dest: "{{ consul.acl_bootstrap_reset_path }}"
      delegate_to: "{{ server }}"
      loop: "{{ groups['consul_server'] }}"
      loop_control:
        loop_var: 'server'

    - name: 'Attempt (again) to perform ACL bootstrap.'
      ansible.builtin.shell:
        cmd: 'consul acl bootstrap'
      register: 'bootstrap_result'

    - name: 'Extract SecretID from successful bootstrap.'
      ansible.builtin.set_fact:
        consul_mgmt_token: "{{ bootstrap_result.stdout | regex_search('SecretID:\\s+([a-f0-9\\-]+)', '\\1') | first }}"

    - name: 'Clear host errors.'
      ansible.builtin.meta: 'clear_host_errors'

  always:

    - name: 'Display the management token for vault storage.'
      ansible.builtin.debug:
        msg: |
          =====================================
          CONSUL MANAGEMENT TOKEN GENERATED:
          {{ consul_mgmt_token }}
          
          Store this token in the Ansible vault with:
          goldentooth set_vault secret_vault.consul.mgmt_token "{{ consul_mgmt_token }}"
          =====================================

    - name: 'Remove ACL bootstrap reset file after completion.'
      ansible.builtin.file:
        path: "{{ consul.acl_bootstrap_reset_path }}"
        state: 'absent'
      changed_when: false

  when: "inventory_hostname in groups['consul_server']"
  run_once: true
