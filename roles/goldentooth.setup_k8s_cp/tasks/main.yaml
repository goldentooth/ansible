---
- name: 'Setup the control plane nodes.'
  when: "cluster_role == 'control_plane'"
  block:

    - name: 'Unhold kubeadm, kubelet, and kubectl.'
      ansible.builtin.dpkg_selections:
        name: "{{ package }}"
        selection: 'deinstall'
      loop: "{{ k8s_apt_packages }}"
      loop_control:
        loop_var: 'package'
      become: true

    - name: 'Uninstall kubeadm, kubelet, and kubectl.'
      ansible.builtin.apt:
        name: "{{ k8s_apt_packages }}"
        state: 'absent'
        cache_valid_time: 3600
      become: true

    - name: 'Install kubeadm, kubelet, and kubectl.'
      ansible.builtin.apt:
        name: "{{ k8s_apt_packages }}"
        state: 'present'
        cache_valid_time: 3600
      become: true

    - name: 'Hold kubeadm, kubelet, and kubectl.'
      ansible.builtin.dpkg_selections:
        name: "{{ package }}"
        selection: 'hold'
      loop: "{{ k8s_apt_packages }}"
      loop_control:
        loop_var: 'package'
      become: true

    - name: 'Check if the cluster has already been initialized.'
      ansible.builtin.stat:
        path: "{{ k8s_admin_config_path}}"
      register: k8s_admin_config_stat
      when: "cluster_role == 'control_plane'"

    - name: 'Aggregate the SANs for the API server certificate.'
      ansible.builtin.set_fact:
        apiserver_sans: "{{ (sans_base + groups['control_plane'] + sans_lb + sans_lb_ip + sans_ip + sans_hostname + sans_fqdn) | unique }}"
      vars:
        sans_base:
          - 'kubernetes'
          - 'kubernetes.default'
          - 'kubernetes.default.svc'
          - "kubernetes.default.svc.{{ cluster_name }}"
          - "{{ load_balancer.ipv4_address }}"
          - "localhost"
          - "127.0.0.1"
        sans_lb: "{{ [load_balancer.hostname] }}"
        sans_lb_ip: "{{ [load_balancer.ipv4_address] }}"
        sans_ip: "{{ groups['control_plane'] | map('extract', hostvars, 'ipv4_address') | list | select('defined') | list }}"
        sans_hostname: "{{ groups['control_plane'] | map('extract', hostvars, ['ansible_hostname']) | list | select('defined') | list }}"
        sans_fqdn: "{{ groups['control_plane'] | map('extract', hostvars, ['ansible_fqdn']) | list | select('defined') | list }}"

    - name: 'Create cluster with Kubeadm.'
      when: "not k8s_admin_config_stat.stat.exists"
      block:

        - name: 'Deploy the Kubeadm configuration file.'
          ansible.builtin.template:
            src: 'kubeadm_config.yaml.j2'
            dest: "{{ k8s_kubeadm_config_path }}"
          become: true

        - name: 'Initialize the first control plane node.'
          ansible.builtin.command: |-
            kubeadm init
              --config={{ k8s_kubeadm_config_path }}
              --upload-certs
          register: kubeadm_init
          # Retry is because upload config sometimes fails
          retries: 5
          until: 'kubeadm_init is succeeded or "field is immutable" in kubeadm_init.stderr'
          when: 'inventory_hostname == control_plane.first.hostname'
          failed_when: 'kubeadm_init.rc != 0 and "field is immutable" not in kubeadm_init.stderr'
          become: true

        - name: 'Print the init output to screen.'
          ansible.builtin.debug:
            var: 'kubeadm_init.stdout'

        - name: 'Print the init output to screen.'
          ansible.builtin.debug:
            var: 'kubeadm_init.stderr'

        - name: 'Set kubeadm certificate key.'
          ansible.builtin.set_fact:
            k8s_kubeadm_certificate_key: "{{ item | regex_search('--certificate-key ([^ ]+)', '\\1') | first }}"
          with_items: "{{ hostvars[control_plane.first.hostname]['kubeadm_init'].stdout_lines | default([]) }}"
          when: '(item | trim) is match(".*--certificate-key.*")'

        - name: 'Create kubeadm token for joining nodes.'
          ansible.builtin.command: |-
            kubeadm token create
              --kubeconfig {{ k8s_admin_config_path }}
          register: 'temp_token'
          retries: 5
          delay: 5
          until: temp_token is succeeded
          delegate_to: "{{ control_plane.first.hostname }}"
          become: true

        - name: 'Set kubeadm_token.'
          set_fact:
            kubeadm_token: "{{ temp_token.stdout }}"
          when: 'temp_token.stdout is defined'

        - name: 'Ensure .kube directory exists.'
          ansible.builtin.file:
            path: '~/.kube'
            state: directory
            mode: 0755
          become: true

        - name: 'Symlink the kubectl admin.conf to ~/.kube/conf.'
          ansible.builtin.file:
            src: "{{ k8s_admin_config_path }}"
            dest: '~/.kube/config'
            state: 'link'
            mode: 0644
          become: true

        - name: 'Upload certificates so they are fresh and not expired.'
          ansible.builtin.command: |-
            kubeadm init phase upload-certs
              --config {{ k8s_kubeadm_config_path }}
              --upload-certs
          register: 'kubeadm_uploaded_certs'
          when: 'inventory_hostname == control_plane.first.hostname'
          become: true

        - name: 'Parse certificate key if not set explicitly.'
          ansible.builtin.set_fact:
            kubeadm_certificate_key: "{{ hostvars[control_plane.first.hostname]['kubeadm_uploaded_cert'].stdout_lines[-1] | trim }}"
          run_once: yes
          when:
            - 'hostvars[control_plane.first.hostname]["kubeadm_uploaded_cert"] is defined'
            - 'hostvars[control_plane.first.hostname]["kubeadm_uploaded_cert"] is not skipped'

        - name: 'Create kubeadm configuration for the control plane.'
          ansible.builtin.template:
            src: 'kubeadm_control_plane_config.yaml.j2'
            dest: "{{ k8s_kubeadm_control_plane_config_path }}"
            mode: 0640
            backup: yes
          when: 'inventory_hostname in control_plane.rest.hostnames'
          become: true

        - name: 'Wait for API server to become available.'
          ansible.builtin.wait_for:
            host: "{{ load_balancer.ipv4_address }}"
            port: 6443
            timeout: 180

        - name: 'Reset the certificate directory.'
          ansible.builtin.command: 'kubeadm reset -f --cert-dir {{ kube_cert_dir }}'
          when: 'inventory_hostname in control_plane.rest.hostnames'
          become: true

        - name: 'Join this control plane node to the cluster.'
          ansible.builtin.command: |-
            kubeadm join
              --config {{ k8s_kubeadm_control_plane_config_path }}
          register: 'kubeadm_joined_control_plane'
          retries: 3
          throttle: 1
          until: 'kubeadm_join_control_plane is succeeded'
          when: 'inventory_hostname in control_plane.rest.hostnames'
