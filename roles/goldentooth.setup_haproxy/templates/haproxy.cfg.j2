# /etc/haproxy/haproxy.cfg

# This is the HAProxy configuration file for the load balancer in my Kubernetes
# cluster. It is used to load balance the API server traffic between the
# control plane nodes.

# Global parameters
global
  # Sets uid for haproxy process.
  user haproxy
  # Sets gid for haproxy process.
  group haproxy
  # Sets the maximum per-process number of concurrent connections.
  maxconn 4096
  # Configure logging.
  log /dev/log local0
  log /dev/log local1 notice
  # Enable master-worker mode for dataplane API
  master-worker
  # Stats socket for dataplane API
  stats socket /var/run/haproxy/admin.sock mode 660 level admin group haproxy
  stats timeout 30s

# Default parameters
defaults
  # Use global log configuration.
  log global
  # Sets the maximum time to wait for a connection.
  timeout connect 10s

# Userlist for dataplane API authentication
userlist dataplaneapi
  user {{ my.name.lower }} insecure-password {{ secret_vault.easy_password }}

# Frontend configuration for the HAProxy stats page.
frontend stats-frontend
  # Listen on all IPv4 addresses on port 8404.
  bind *:8404
  # Use HTTP mode.
  mode http
  # Enable the stats page.
  stats enable
  # Set the URI to access the stats page.
  stats uri /stats
  # Set the refresh rate of the stats page.
  stats refresh 10s
  # Set the realm to access the stats page.
  stats realm HAProxy\ Statistics
  # Set the username and password to access the stats page.
  stats auth {{ my.name.lower }}:{{ secret_vault.easy_password }}
  # Sets the maximum inactivity time on the client side.
  timeout client 3600s
  # Hide HAProxy version to improve security.
  stats hide-version

frontend prometheus
  bind *:8405
  mode http
  http-request use-service prometheus-exporter if { path /metrics }
  no log

# HTTP frontend - redirect everything to HTTPS
frontend services-http
  # Listen on port 80 for HTTP traffic
  bind *:80
  # Use HTTP mode
  mode http
  # Enable logging
  option httplog
  # Sets the maximum inactivity time on the client side
  timeout client 30s

  # Redirect all HTTP traffic to HTTPS
  redirect scheme https

# HTTPS frontend configuration for services.
frontend services-https
  # Listen on port 443 for HTTPS traffic
  bind *:443 ssl crt /etc/ssl/private/goldentooth.pem
  # Use HTTP mode for application layer routing
  mode http
  # Enable logging
  option httplog
  # Sets the maximum inactivity time on the client side
  timeout client 30s

  # Route to appropriate backend based on SNI/Host header
  # Dynamic backends created by Consul service discovery
  use_backend consul-grafana if { hdr(host) -i grafana.services.goldentooth.net }
  use_backend consul-prometheus if { hdr(host) -i prometheus.services.goldentooth.net }
  use_backend consul-loki if { hdr(host) -i loki.services.goldentooth.net }
  use_backend consul-mcp-server if { hdr(host) -i mcp.services.goldentooth.net }
  use_backend consul-authelia if { hdr(host) -i auth.services.goldentooth.net }
  use_backend consul-haproxy-api if { hdr(host) -i haproxy-api.services.goldentooth.net }
  # Static backends for HashiCorp services (require client certs)
  use_backend vault-backend if { hdr(host) -i vault.services.goldentooth.net }
  use_backend nomad-backend if { hdr(host) -i nomad.services.goldentooth.net }
  use_backend consul-backend if { hdr(host) -i consul.services.goldentooth.net }

  # Per-node MCP server routing
{% for host in groups['mcp_server'] %}
  use_backend mcp-{{ host }}-backend if { hdr(host) -i mcp.services.{{ host }}.nodes.goldentooth.net }
{% endfor %}

  # Node homepage routing
{% for host in groups['all'] %}
  use_backend {{ host }}-homepage-backend if { hdr(host) -i {{ host }}.nodes.goldentooth.net }
{% endfor %}

  # Default to grafana for backwards compatibility
  default_backend consul-grafana

# Kubernetes API server frontend configuration.
frontend k8s-api-server
  # Listen on the IPv4 address of the load balancer on port 6443.
  bind {{ ipv4_address }}:6443
  # Use TCP mode, which means that the connection will be passed to the server
  # without TLS termination, etc.
  mode tcp
  # Enable logging of the client's IP address and port.
  option tcplog
  # Sets the maximum inactivity time on the client side.
  # I might reduce this at some point.
  timeout client 86400s
  # Use the Kubernetes API server backend.
  default_backend k8s-api-server

# Kubernetes API server backend configuration.
backend k8s-api-server
  # Use TCP mode, not HTTPS.
  mode tcp
  # Sets the load balancing algorithm.
  # `roundrobin` means that each server is used in turns, according to their
  # weights.
  balance roundrobin
  # Enable health checks.
  option tcp-check
  # Sets the maximum inactivity time on the server side.
  # I might reduce this at some point.
  timeout server 86400s
  # For each control plane node, add a server line with the node's hostname and
  # IP address.
  # The `check` parameter enables health checks.
  # The `fall` parameter sets the number of consecutive health check failures
  # after which the server is considered to be down.
  # The `rise` parameter sets the number of consecutive health check successes
  # after which the server is considered to be up.
{% for host in groups['k8s_control_plane'] %}
  server {{ host }} {{ hostvars[host]['ipv4_address'] }}:6443 check fall 3 rise 2
{% endfor %}

# Dynamic backends for Consul-discovered services will be created automatically
# by the HAProxy Dataplane API based on Consul service registrations

# Vault backend configuration.
backend vault-backend
  # Use HTTP mode
  mode http
  # Sets the load balancing algorithm
  balance roundrobin
  # Disable health checks (Vault requires client certificates)
  # Sets the maximum inactivity time on the server side
  timeout server 30s
  # Vault server configuration (HTTPS backend)
{% for host in groups['vault'] %}
  server {{ host }} {{ hostvars[host]['ipv4_address'] }}:8200 ssl verify none
{% endfor %}

# Nomad backend configuration.
backend nomad-backend
  # Use HTTP mode
  mode http
  # Sets the load balancing algorithm
  balance roundrobin
  # Disable health checks (Nomad requires client certificates)
  # Sets the maximum inactivity time on the server side
  timeout server 30s
  # Nomad server configuration (HTTPS backend)
{% for host in groups['nomad_server'] %}
  server {{ host }} {{ hostvars[host]['ipv4_address'] }}:4646 ssl verify none
{% endfor %}

# Consul backend configuration.
backend consul-backend
  # Use HTTP mode
  mode http
  # Sets the load balancing algorithm
  balance roundrobin
  # Disable health checks (Consul requires client certificates)
  # Sets the maximum inactivity time on the server side
  timeout server 30s
  # Consul server configuration (HTTPS backend)
{% for host in groups['consul_server'] %}
  server {{ host }} {{ hostvars[host]['ipv4_address'] }}:8501 ssl verify none
{% endfor %}

# Static authelia backend removed - now uses dynamic consul-authelia backend

# Per-node MCP server backend configurations (still static for per-node access).
{% for host in groups['mcp_server'] %}
backend mcp-{{ host }}-backend
  # Use HTTP mode
  mode http
  # No load balancing needed (single server)
  # Enable health checks (MCP server v0.0.26+ has /health endpoint)
  option httpchk GET /health
  # Sets the maximum inactivity time on the server side
  timeout server 30s
  # Single node MCP server configuration
  server {{ host }} {{ hostvars[host]['ipv4_address'] }}:{{ hostvars[host]['mcp_server_port'] | default(mcp_server_port) }} check fall 3 rise 2

{% endfor %}

# Node homepage backend configurations.
{% for host in groups['all'] %}
backend {{ host }}-homepage-backend
  # Use HTTP mode
  mode http
  # No load balancing needed (single server)
  # Enable health checks for homepage
  option httpchk GET /
  # Sets the maximum inactivity time on the server side
  timeout server 30s
  # Node homepage configuration (HTTP backend to nginx on port 8090)
  server {{ host }} {{ hostvars[host]['ipv4_address'] }}:8090 check fall 3 rise 2

{% endfor %}

# Static HAProxy API backend removed - now uses dynamic consul-haproxy-api backend
