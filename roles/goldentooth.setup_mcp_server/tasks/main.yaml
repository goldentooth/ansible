---
# Tasks for goldentooth.setup_mcp_server role

- name: Create MCP server group
  group:
    name: "{{ mcp_server_group }}"
    system: true
  become: true

- name: Create MCP server user
  user:
    name: "{{ mcp_server_user }}"
    group: "{{ mcp_server_group }}"
    system: true
    shell: /usr/sbin/nologin
    home: "{{ mcp_server_working_dir }}"
    create_home: true
  become: true

- name: Create MCP server working directory
  file:
    path: "{{ mcp_server_working_dir }}"
    state: directory
    owner: "{{ mcp_server_user }}"
    group: "{{ mcp_server_group }}"
    mode: '0755'
  become: true

- name: Get latest release information from GitHub
  uri:
    url: "{{ mcp_server_github_api_url }}/releases/latest"
    method: GET
    return_content: true
  register: github_release
  delegate_to: localhost
  run_once: true
  become: false

- name: Set release facts
  set_fact:
    mcp_release_version: "{{ github_release.json.tag_name }}"
    mcp_release_assets: "{{ github_release.json.assets }}"

- name: Determine architecture-specific binary name
  set_fact:
    mcp_binary_name: >-
      {%- if ansible_architecture == 'x86_64' -%}
      goldentooth-mcp-x86_64-linux
      {%- elif ansible_architecture == 'aarch64' -%}
      goldentooth-mcp-aarch64-linux
      {%- else -%}
      goldentooth-mcp-x86_64-linux
      {%- endif -%}

- name: Find binary asset URL
  set_fact:
    mcp_binary_url: "{{ item.browser_download_url }}"
  loop: "{{ mcp_release_assets }}"
  when: item.name == mcp_binary_name

- name: Fail if binary not found
  fail:
    msg: "Could not find binary {{ mcp_binary_name }} in release {{ mcp_release_version }}"
  when: mcp_binary_url is not defined

- name: Check if binary is already installed
  stat:
    path: "{{ mcp_server_install_dir }}/{{ mcp_server_binary_name }}"
  register: existing_binary

- name: Check current binary version
  command: "{{ mcp_server_install_dir }}/{{ mcp_server_binary_name }} --version"
  register: current_version
  when: existing_binary.stat.exists
  changed_when: false
  failed_when: false

- name: Download latest MCP server binary
  get_url:
    url: "{{ mcp_binary_url }}"
    dest: "{{ mcp_server_install_dir }}/{{ mcp_server_binary_name }}"
    mode: '0755'
    owner: root
    group: root
    backup: true
  become: true
  notify: restart goldentooth-mcp
  when: >
    not existing_binary.stat.exists or
    (current_version.stdout is defined and mcp_release_version not in current_version.stdout)

- name: Install systemd service file
  template:
    src: goldentooth-mcp.service.j2
    dest: "/etc/systemd/system/{{ mcp_server_service_name }}.service"
    mode: '0644'
    owner: root
    group: root
  become: true
  notify:
    - reload systemd
    - restart goldentooth-mcp

- name: Enable and start MCP server service
  systemd:
    name: "{{ mcp_server_service_name }}"
    enabled: true
    state: started
    daemon_reload: true
  become: true

- name: Verify service is running
  systemd:
    name: "{{ mcp_server_service_name }}"
  register: service_status
  become: true

- name: Display service status
  debug:
    msg: "MCP server service is {{ service_status.status.ActiveState }} ({{ service_status.status.SubState }})"